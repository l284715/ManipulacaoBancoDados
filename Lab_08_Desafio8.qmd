---
title: "Lab 08 e Desafio 8"
author: "Luiz Eduardo Rodrigues"
format: html
editor: visual
---

(Carregamento de Pacotes)

```{r}
library(RSQLite)
```

1 e 2)

```{r}
conn <- dbConnect(SQLite(), "Dados/database.sqlite3")

query_professores_stat <- "
  SELECT DISTINCT instructors.name AS professor_name
  FROM instructors
  JOIN teachings ON instructors.id = teachings.instructor_id
  JOIN sections ON teachings.section_uuid = sections.uuid
  JOIN course_offerings ON sections.course_offering_uuid = course_offerings.uuid
  JOIN subject_memberships ON course_offerings.uuid = subject_memberships.course_offering_uuid
  JOIN subjects ON subject_memberships.subject_code = subjects.code
  WHERE subjects.abbreviation = 'STAT'
"
professores_stat <- dbGetQuery(conn, query_professores_stat)
num_professores_stat <- nrow(professores_stat)

cat('Professores que lecionaram disciplinas de Estatística:\n')
print(professores_stat)
cat('\nNúmero de professores:', num_professores_stat, '\n')
```

3 e 4)

```{r}
conn <- dbConnect(SQLite(), "Dados/database.sqlite3")

query_gpa_media_professor <- "
SELECT 
  instructors.name AS professor_name,
  CAST(SUM(
    (a_count * 4.0) + (ab_count * 3.5) + (b_count * 3.0) + (bc_count * 2.5) + (c_count * 2.0) + (d_count * 1.0) + (f_count * 0.0)
  ) AS FLOAT) / NULLIF(SUM(a_count + ab_count + b_count + bc_count + c_count + d_count + f_count), 0) AS average_gpa
FROM grade_distributions
JOIN sections ON grade_distributions.course_offering_uuid = sections.course_offering_uuid
            AND grade_distributions.section_number = sections.number
JOIN teachings ON sections.uuid = teachings.section_uuid
JOIN instructors ON teachings.instructor_id = instructors.id
JOIN course_offerings ON sections.course_offering_uuid = course_offerings.uuid
JOIN subject_memberships ON course_offerings.uuid = subject_memberships.course_offering_uuid
JOIN subjects ON subject_memberships.subject_code = subjects.code
WHERE subjects.abbreviation = 'STAT'
GROUP BY instructors.name
"
gpa_media_professor <- dbGetQuery(conn, query_gpa_media_professor)

cat('\nGPA médio por professor (Estatística):\n')
print(gpa_media_professor)

mais_dificil_professor <- gpa_media_professor[which.min(gpa_media_professor$average_gpa), ]
mais_facil_professor <- gpa_media_professor[which.max(gpa_media_professor$average_gpa), ]

cat('\nProfessor mais difícil:\n')
print(mais_dificil_professor)

cat('\nProfessor mais fácil:\n')
print(mais_facil_professor)

query_gpa_media_disciplina <- "
SELECT 
  courses.name AS course_name,
  CAST(SUM(
    (a_count * 4.0) + (ab_count * 3.5) + (b_count * 3.0) + (bc_count * 2.5) + (c_count * 2.0) + (d_count * 1.0) + (f_count * 0.0)
  ) AS FLOAT) / NULLIF(SUM(a_count + ab_count + b_count + bc_count + c_count + d_count + f_count), 0) AS average_gpa
FROM grade_distributions
JOIN sections ON grade_distributions.course_offering_uuid = sections.course_offering_uuid
            AND grade_distributions.section_number = sections.number
JOIN course_offerings ON sections.course_offering_uuid = course_offerings.uuid
JOIN courses ON course_offerings.course_uuid = courses.uuid
JOIN subject_memberships ON course_offerings.uuid = subject_memberships.course_offering_uuid
JOIN subjects ON subject_memberships.subject_code = subjects.code
WHERE subjects.abbreviation = 'STAT'
GROUP BY courses.name
ORDER BY average_gpa ASC
"
gpa_media_disciplina <- dbGetQuery(conn, query_gpa_media_disciplina)

cat('\nGPA médio por disciplina (Estatística):\n')
print(gpa_media_disciplina)

disciplina_mais_dificil <- gpa_media_disciplina[which.min(gpa_media_disciplina$average_gpa), ]
disciplina_mais_facil <- gpa_media_disciplina[which.max(gpa_media_disciplina$average_gpa), ]

cat('\nDisciplina mais difícil:\n')
print(disciplina_mais_dificil)

cat('\nDisciplina mais fácil:\n')
print(disciplina_mais_facil)

dbDisconnect(conn)

data_hora <- format(Sys.time(), "%d/%m/%Y %H:%M:%S")
data_hora
```
