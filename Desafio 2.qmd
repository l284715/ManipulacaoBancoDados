---
title: "Lab 02 Desafio"
author: "Luiz Eduardo Rodrigues"
format: html
editor: visual
---

*Desafio feito com auxílio do ChatGPT*

```{r}
library(reticulate)
py_config()
```

1) As estatísticas suficientes para realizar essa determinação tratam-se do total de voos observados e o total de voos com atrasos.

2)
```{python}
import pandas as pd

def getStats(df, pos=None):
    df = df[df["AIRLINE"] == "AA"]
    
    df = df.dropna(subset=["ARRIVAL_DELAY","MONTH","DAY","YEAR"])
    
    df["atrasado"] = (df["ARRIVAL_DELAY"] > 10).astype(int)
    
    stats = (
        df.groupby(["YEAR","MONTH","DAY"])
          .agg(n_voos=("AIRLINE","size"),
               n_atrasados=("atrasado","sum"))
          .reset_index()
    )
    return stats
```

3)
```{python}
import zipfile

def process_in_chunks(filepath, chunksize=100000):
    final_stats = []
    with zipfile.ZipFile(filepath) as z:
        with z.open("flights.csv") as f:
            for chunk in pd.read_csv(f, chunksize=chunksize,
                                     usecols=["YEAR","MONTH","DAY","AIRLINE","ARRIVAL_DELAY"]):
                stats = getStats(chunk)
                final_stats.append(stats)
    resultado_final = pd.concat(final_stats)
    resultado_final = (
        resultado_final.groupby(["YEAR","MONTH","DAY"])
        .agg(n_voos=("n_voos","sum"), n_atrasados=("n_atrasados","sum"))
        .reset_index()
    )
    return resultado_final

resultado_final = process_in_chunks("flights.csv", chunksize=100000)
```

4)
```{python}
def computeStats(resultado_final):
    stats = resultado_final.copy()
    stats["Perc"] = stats["n_atrasados"] / stats["n_voos"]
    stats["Data"] = pd.to_datetime(
        stats[["YEAR","MONTH","DAY"]].astype(str).agg("-".join, axis=1)
    )
    return stats[["Data","Perc"]]

stats = computeStats(resultado_final)
```

5)
```{python}
import seaborn as sns
import matplotlib.pyplot as plt
import calendar

def baseCalendario(stats):
    df = stats.copy()
    df["year"]  = df["Data"].dt.year
    df["month"] = df["Data"].dt.month
    df["week"]  = df["Data"].dt.isocalendar().week
    df["wday"]  = df["Data"].dt.weekday  # 0=segunda
    
    return df

def plotCalendario(stats):
    df = baseCalendario(stats)
    pivot = df.pivot_table(index="wday", columns="Data", values="Perc")
    
    plt.figure(figsize=(18,6))
    sns.heatmap(pivot, cmap=sns.color_palette(["#4575b4","#d73027"], as_cmap=True), cbar=True)
    plt.title("Percentual de Atrasos - AA")
    plt.yticks(ticks=range(7), labels=list(calendar.day_abbr))
    plt.xlabel("Data")
    plt.ylabel("Dia da semana")
    plt.show()

plotCalendario(stats)
```

